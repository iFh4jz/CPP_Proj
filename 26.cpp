/*
 *题目描述
信息社会，有海量的数据需要分析处理，比如公安局分析身份证号码、 QQ 用户、手机号码、银行帐号等信息及活动记录。  

采集输入大数据和分类规则，通过大数据分类处理程序，将大数据分类输出。

?
输入描述:
?一组输入整数序列I和一组规则整数序列R，I和R序列的第一个整数为序列的个数（个数不包含第一个整数）；整数范围为0~0xFFFFFFFF，序列个数不限

输出描述:
?从R依次中取出R<i>，对I进行处理，找到满足条件的I<j>： 

I<j>整数对应的数字需要连续包含R<i>对应的数字。比如R<i>为23，I<j>为231，那么I<j>包含了R<i>，条件满足 。 

按R<i>从小到大的顺序:

(1)先输出R<i>； 

(2)再输出满足条件的I<j>的个数； 

(3)然后输出满足条件的I<j>在I序列中的位置索引(从0开始)； 

(4)最后再输出I<j>。 

附加条件： 

(1)R<i>需要从小到大排序。相同的R<i>只需要输出索引小的以及满足条件的I<j>，索引大的需要过滤掉 

(2)如果没有满足条件的I<j>，对应的R<i>不用输出 

(3)最后需要在输出序列的第一个整数位置记录后续整数序列的个数(不包含“个数”本身)

 

序列I：15,123,456,786,453,46,7,5,3,665,453456,745,456,786,453,123（第一个15表明后续有15个整数） 

序列R：5,6,3,6,3,0（第一个5表明后续有5个整数） 

输出：30, 3,6,0,123,3,453,7,3,9,453456,13,453,14,123,6,7,1,456,2,786,4,46,8,665,9,453456,11,456,12,786

说明：

30----后续有30个整数

3----从小到大排序，第一个R<i>为0，但没有满足条件的I<j>，不输出0，而下一个R<i>是3

6--- 存在6个包含3的I<j> 

0--- 123所在的原序号为0 

123--- 123包含3，满足条件 

示例1
输入
15 123 456 786 453 46 7 5 3 665 453456 745 456 786 453 123
5 6 3 6 3 0
输出
30 3 6 0 123 3 453 7 3 9 453456 13 453 14 123 6 7 1 456 2 786 4 46 8 665 9 453456 11 456 12 786
 * */

# include <iostream>
# include <cstring>
using namespace std;
//对Sort[] 排序从小到大
void Sort(int R[] , int n)
{
    int i;
    int j;
    int temp;
   
    for(i=0 ; i<n ; i++)
    {
        for(j=i+1 ; j<n ; j++)
        {
            if(R[i] > R[j])
            {
                temp = R[i];
                R[i] = R[j];
                R[j] = temp;
            }
        }
    }
}
//把整数a,转化为字符串，在用strstr函数判断是否符合条件。
bool Fun(int a , int b)
{
    int c1 = 0;
    char c[100];
    char d[100];
    int i = 0;
    int j = 0;
   
        while(a)
        {
            c[i] = a%10 + '0';
            a /= 10;
            i++;
        }
        while(b)
        {
            d[j] = b%10 + '0';
            b /= 10;
            j++;
        }
        c[i] = '\0';
        d[j] = '\0';
        //char *strstr( const char *str1, const char *str2 );
        //功能：函数返回一个指针，它指向字符串str2 首次出现于字符串str1中的位置，如果没有找到，返回NULL。
        if(strstr(d,c))
            return true;
        else
            return false;
       
}
int main(void)
{
    int i , j , k;
    int t;
    //最后输出数据的个数
    int a;
    int cnt;//计数
    int m;//序列I的个数
    int n;//序列R的个数
    int I[65535];
    int R[65535];
    int P[65535];
    int Q[1000];
    while(cin>>m )
    {
        a = 0;
        for(i=0 ; i<m ; i++)
        {
            cin>>I[i];
        }
        cin>>n;
        for(j=0 ; j<n ; j++)
        {
            cin>>R[j];
        }
   
        Sort(R,n);
        for(i=0 ; i<n ; i++)
        {
            cnt = 0;
            k = 0;
            while(R[i] == R[i+1] && i<n-1)              
                i++;          
            for(j=0 ; j<m ; j++)
            {
                if (Fun(R[i] , I[j]))
                {
                    Q[k++] = j;
                    Q[k++] = I[j];
                    cnt++;
                }
            }
            if (cnt > 0)
            {
                P[a] = R[i];
                P[a+1] = cnt;
                for(t=1 ; t<=2*cnt ; t++)
                {
                    P[a+1+t] = Q[t-1];
                }
                a = a + 2 + 2*cnt ;
            }
        }
        cout<<a<<' ';
        for(i=0 ; i<a ; i++)
        {
            cout<<P[i];
            if(i == a-1)
            cout<<endl;
            else 
            cout<<' ';
        }
    }
    return 0;
}
